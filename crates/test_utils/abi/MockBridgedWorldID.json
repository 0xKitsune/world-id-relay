{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_treeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotOverwriteRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpiredRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoRootsSeen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentRoot",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "depth",
          "type": "uint8"
        }
      ],
      "name": "UnsupportedTreeDepth",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "timestamp",
          "type": "uint128"
        }
      ],
      "name": "RootAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpiry",
          "type": "uint256"
        }
      ],
      "name": "RootHistoryExpirySet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getTreeDepth",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRoot",
          "type": "uint256"
        }
      ],
      "name": "receiveRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rootHistory",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootHistoryExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiryTime",
          "type": "uint256"
        }
      ],
      "name": "setRootHistoryExpiry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "root",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "signalHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "externalNullifierHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyProof",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60a060405262093a8060005560405161001790610147565b604051809103906000f080158015610033573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905534801561006057600080fd5b5060405161248138038061248183398101604081905261007f91610154565b80610093816100ce60201b6103d21760201c565b6100b957604051630220cee360e61b815260ff8216600482015260240160405180910390fd5b60ff166080526100c8336100f5565b5061017e565b60006010602060ff841682118015906100ed57508060ff168460ff1611155b949350505050565b600480546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611ade806109a383390190565b60006020828403121561016657600080fd5b815160ff8116811461017757600080fd5b9392505050565b60805161080a6101996000396000610114015261080a6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063c70aa72711610076578063f1c621ee1161005b578063f1c621ee1461016b578063f2fde38b146101be578063fbde929b146101d157600080fd5b8063c70aa72714610150578063d7b0fef11461016357600080fd5b80638da5cb5b116100a75780638da5cb5b146100e05780638e5cdd501461010d578063b0d690791461013e57600080fd5b8063354ca120146100c3578063715018a6146100d8575b600080fd5b6100d66100d13660046106d6565b6101e4565b005b6100d661029b565b60045460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610104565b6000545b604051908152602001610104565b6100d661015e366004610729565b6102af565b6101426102c3565b61019d610179366004610729565b6002602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610104565b6100d66101cc366004610742565b610308565b6100d66101df366004610729565b6103c1565b6101ed856103f9565b60035460408051608081018252878152602081018690528082018790526060810185905290517f2357251100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916323572511916102649185919060040161077f565b60006040518083038186803b15801561027c57600080fd5b505afa158015610290573d6000803e3d6000fd5b505050505050505050565b6102a36104bb565b6102ad600061053c565b565b6102b76104bb565b6102c0816105b3565b50565b6000600154600003610301576040517f5b8dabb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060015490565b6103106104bb565b73ffffffffffffffffffffffffffffffffffffffff81166103b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c08161053c565b6103c96104bb565b6102c0816105ee565b60006010602060ff841682118015906103f157508060ff168460ff1611155b949350505050565b60015481036104055750565b6000818152600260205260408120546fffffffffffffffffffffffffffffffff1690819003610460576040517fddae3b7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005461047f6fffffffffffffffffffffffffffffffff8316426107bf565b11156104b7576040517f3ae7359e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60045473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103af565b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008190556040518181527f147b815b6a3a8dd5d49310410e089f6b5e9f3782e944772edc938c8bb48ef1219060200160405180910390a150565b6000818152600260205260409020546fffffffffffffffffffffffffffffffff168015610647576040517f6650c4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182905560008281526002602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016426fffffffffffffffffffffffffffffffff8116918217909255835186815292830152917fe97c89cbb137505b36f55ebfc9732fd6c4c73ff43d49db239fc25f6e7a534145910160405180910390a1505050565b60008060008060006101808087890312156106f057600080fd5b8635955060208701359450604087013593506060870135925087818801111561071857600080fd5b506080860190509295509295909350565b60006020828403121561073b57600080fd5b5035919050565b60006020828403121561075457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b9392505050565b610180810161010080858437600090830181815284915b60048110156107b5578251825260209283019290910190600101610796565b5050509392505050565b6000828210156107f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea164736f6c634300080f000a608060405234801561001057600080fd5b50611abe806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063235725111461004657806344f636921461005b578063f2457c8d14610084575b600080fd5b61005961005436600461198b565b610097565b005b61006e6100693660046119c2565b61032f565b60405161007b91906119e6565b60405180910390f35b610059610092366004611a17565b61038c565b6000806100a3836106c2565b9150915060006040516101008682377f168e4fddac50a40d5bcff39c7fa9207cd368444c0c01a86690a6645b52f3aa1f6101008201527f2139a256456825daa623957c4f2ea1a0d26f135769e450759142a7159b0a44766101208201527f07859424108de88bfbe5c80a19c0e80ba35fda4383d3fd125305dd04b4c08fe46101408201527f142ad7a93ca0c554a9f0303059e5a24e85400004a730598bd423b0090f4b3d4a6101608201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08201527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008201527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f61022082015283610240820152826102608201527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e08201526020816103008360085afa905116905080610328576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b61033761190d565b61034a82358360015b60200201356109c8565b81526103686060830135604084013560a08501356080860135610b67565b6020830152604082015261038260c0830135836007610340565b6060820152919050565b60008061039f84825b6020020135611041565b909250905060008080806103bb604089013560208a0135611165565b929650909450925090506000806103d38a6003610395565b915091506000806103e38b6106c2565b915091506103ef61192b565b8a8152602081018a905260408101889052606081018990526080810186905260a0810187905260c0810185905260e081018490527f168e4fddac50a40d5bcff39c7fa9207cd368444c0c01a86690a6645b52f3aa1f6101008201527f2139a256456825daa623957c4f2ea1a0d26f135769e450759142a7159b0a44766101208201527f07859424108de88bfbe5c80a19c0e80ba35fda4383d3fd125305dd04b4c08fe46101408201527f142ad7a93ca0c554a9f0303059e5a24e85400004a730598bd423b0090f4b3d4a6101608201527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e26101808201527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d19266101a08201527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101c08201527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101e08201527e1752a100a72fdf1e5a5d6ea841cc20ec838bccfcf7bd559e79f1c9c759b6a06102008201527f192a8cc13cd9f762871f21e43451c6ca9eeab2cb2987c4e366a185c25dac2e7f610220820152610240810183905261026081018290527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26102808201527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6102a08201527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec6102c08201527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d6102e0820152600061065e61194a565b6020816103008560085afa915081158061067a57508051600114155b156106b1576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050505050505050565b6000806000600190506040516040810160007f0335f514c2acb9b255aae85514122267cd7d16e374c6231a2c34417d3449125483527f07fa1580c1cc3ed4f6d660c6f60f86afedd8a12fb90b2e8ed4f7e310c88b97f760208401527f20b781dd0db3b7980a4b3814128c86e597e1442d0fc9eb7f932a5229494d6b7982527f17d1cef436eb2f665670c7b34854e62c227043a7b111a539c0295518bbab3ca96020830152863590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f260945445b4205f874ab7e203a18240e51c9d3c896ea300d40132b1c2f50299a82527f11087a8b76b0f957e1c482c909302916795f811a06866059e403689c01c903fb6020830152602087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f11d20fd81c0e5cf48ba1469ccb8ac99dcdc7cf746a6e70762a939d63dcc52dbf82527f2d447c5f134eff527d7bcaace88b3842c42b800d8dc049e0a6e72f5efc14293d6020830152604087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181108416935060408260608460075afa8416935060408360808560065afa841693507f107cd54a1606a6a873bed4c1b76af48975e66dcf6c127b4c799ad4fdd230b87c82527f1a51b81f6c07725ebcc56ebb1c482b99340eaa9bcb86cc09aed6f58a28e530b66020830152606087013590508060408301527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018110841693505060408160608360075afa831692505060408160808360065afa815160209092015191945090925016806109c2576040517fa54f8e2700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50915091565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783101580610a1957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478210155b15610a50576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82158015610a5c575081155b15610a6957506000610b61565b6000610ade7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47877f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47898a0909086114b0565b9050808303610af3575050600182901b610b61565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478082068103068303610b2d575050600182811b17610b61565b6040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b92915050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4786101580610bb957507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b80610be457507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478410155b80610c0f57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478310155b15610c46576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82848688171717600003610c5f57506000905080611038565b600080807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610caf60037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611a73565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8c0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c8d0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c8d090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5089450610e707f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478e870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b9350505050600080610ef77f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780610ea957610ea9611a44565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478586097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47878809086114b0565b9050610f687f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478488080961153f565b15915050610f7783838361159b565b90935091508683148015610f8a57508186145b15610fb45780610f9b576000610f9e565b60025b60ff1660028a901b176000179450879350611034565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478084068103068714801561100e57507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780830681030686145b15610b2d578061101f576000611022565b60025b60ff1660028a901b1760011794508793505b5050505b94509492505050565b6000808260000361105757506000928392509050565b600183811c9250808416147f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4783106110bb576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61112e7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47867f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4788890909086114b0565b915080156109c2577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808306810306915050915091565b600080808085158015611176575084155b1561118c575060009250829150819050806114a7565b600286811c945085935060018088161490808816147f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47861015806111f057507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478510155b15611227576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761127560037f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611a73565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47888a0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8b0909905060007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47887f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a8b090990507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478a860984087f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e50896506114367f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478c870984087f2fcd3ac2a640a154eb23960892a85a68f031ca0c8344b23a577dcf1052b9e775087f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b955061144387878661159b565b909750955084156114a1577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780880681030696507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4780870681030695505b50505050505b92959194509250565b60006114dc827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f526117f2565b9050817f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478283091461153a576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008061156c837f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f526117f2565b9050827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47828309149392505050565b600080806115f17f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808788097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47898a09086114b0565b90508315611622577f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47908190068103065b6116917f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd477f183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea47f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47848a08096114b0565b92507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476116e17f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760028609611882565b860991507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476117587f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478485097f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681030690565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4785860908861415806117b257507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47808385096002098514155b156117e9576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50935093915050565b60008060405160208152602080820152602060408201528460608201528360808201527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760a082015260208160c08360055afa90519250905080610b5f576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006118ae827f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd456117f2565b90507f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781830960011461153a576040517f7fcdd1f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180608001604052806004906020820280368337509192915050565b6040518061030001604052806018906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b806101008101831015610b6157600080fd5b8060808101831015610b6157600080fd5b600080610180838503121561199f57600080fd5b6119a98484611968565b91506119b984610100850161197a565b90509250929050565b600061010082840312156119d557600080fd5b6119df8383611968565b9392505050565b60808101818360005b6004811015611a0e5781518352602092830192909101906001016119ef565b50505092915050565b6000806101008385031215611a2b57600080fd5b611a35848461197a565b91506119b9846080850161197a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082821015611aac577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea164736f6c634300080f000a",
    "sourceMap": "556:2456:27:-:0;;;1291:7:20;1252:46;;1904:23;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1857:70:20;;;-1:-1:-1;;;;;;1857:70:20;-1:-1:-1;;;;;1857:70:20;;;;;;;;;;1033:58:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1077:10;4018:48:20;4055:10;4018:36;;;;;:48;;:::i;:::-;4013:119;;4089:32;;-1:-1:-1;;;4089:32:20;;464:4:36;452:17;;4089:32:20;;;434:36:36;407:18;;4089:32:20;;;;;;;4013:119;4142:22;;;;936:32:11;719:10:13;936:18:11;:32::i;:::-;1033:58:27;556:2456;;386:207:35;444:19;492:2;521;540:21;;;;-1:-1:-1;540:21:35;;;:46;;;578:8;565:21;;:9;:21;;;;540:46;533:53;386:207;-1:-1:-1;;;;386:207:35:o;2433:187:11:-;2525:6;;;-1:-1:-1;;;;;2541:17:11;;;-1:-1:-1;;;;;;2541:17:11;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;556:2456:27:-;;;;;;;;:::o;14:273:36:-;82:6;135:2;123:9;114:7;110:23;106:32;103:52;;;151:1;148;141:12;103:52;183:9;177:16;233:4;226:5;222:16;215:5;212:27;202:55;;253:1;250;243:12;202:55;276:5;14:273;-1:-1:-1;;;14:273:36:o;292:184::-;556:2456:27;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063c70aa72711610076578063f1c621ee1161005b578063f1c621ee1461016b578063f2fde38b146101be578063fbde929b146101d157600080fd5b8063c70aa72714610150578063d7b0fef11461016357600080fd5b80638da5cb5b116100a75780638da5cb5b146100e05780638e5cdd501461010d578063b0d690791461013e57600080fd5b8063354ca120146100c3578063715018a6146100d8575b600080fd5b6100d66100d13660046106d6565b6101e4565b005b6100d661029b565b60045460405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152602001610104565b6000545b604051908152602001610104565b6100d661015e366004610729565b6102af565b6101426102c3565b61019d610179366004610729565b6002602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610104565b6100d66101cc366004610742565b610308565b6100d66101df366004610729565b6103c1565b6101ed856103f9565b60035460408051608081018252878152602081018690528082018790526060810185905290517f2357251100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909216916323572511916102649185919060040161077f565b60006040518083038186803b15801561027c57600080fd5b505afa158015610290573d6000803e3d6000fd5b505050505050505050565b6102a36104bb565b6102ad600061053c565b565b6102b76104bb565b6102c0816105b3565b50565b6000600154600003610301576040517f5b8dabb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5060015490565b6103106104bb565b73ffffffffffffffffffffffffffffffffffffffff81166103b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102c08161053c565b6103c96104bb565b6102c0816105ee565b60006010602060ff841682118015906103f157508060ff168460ff1611155b949350505050565b60015481036104055750565b6000818152600260205260408120546fffffffffffffffffffffffffffffffff1690819003610460576040517fddae3b7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005461047f6fffffffffffffffffffffffffffffffff8316426107bf565b11156104b7576040517f3ae7359e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60045473ffffffffffffffffffffffffffffffffffffffff1633146102ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103af565b6004805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008190556040518181527f147b815b6a3a8dd5d49310410e089f6b5e9f3782e944772edc938c8bb48ef1219060200160405180910390a150565b6000818152600260205260409020546fffffffffffffffffffffffffffffffff168015610647576040517f6650c4d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600182905560008281526002602090815260409182902080547fffffffffffffffffffffffffffffffff0000000000000000000000000000000016426fffffffffffffffffffffffffffffffff8116918217909255835186815292830152917fe97c89cbb137505b36f55ebfc9732fd6c4c73ff43d49db239fc25f6e7a534145910160405180910390a1505050565b60008060008060006101808087890312156106f057600080fd5b8635955060208701359450604087013593506060870135925087818801111561071857600080fd5b506080860190509295509295909350565b60006020828403121561073b57600080fd5b5035919050565b60006020828403121561075457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b9392505050565b610180810161010080858437600090830181815284915b60048110156107b5578251825260209283019290910190600101610796565b5050509392505050565b6000828210156107f8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50039056fea164736f6c634300080f000a",
    "sourceMap": "556:2456:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7152:473:20;;;;;;:::i;:::-;;:::i;:::-;;1831:101:11;;;:::i;1201:85::-;1273:6;;1201:85;;1273:6;;;;711:74:36;;699:2;684:18;1201:85:11;;;;;;;;9254:93:20;;;968:4:36;9331:9:20;956:17:36;938:36;;926:2;911:18;9254:93:20;796:184:36;8276:110:20;8334:7;8360:19;8276:110;;;1131:25:36;;;1119:2;1104:18;8276:110:20;985:177:36;2876:134:27;;;;;;:::i;:::-;;:::i;8007:172:20:-;;;:::i;1540:46::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1528:34:36;1516:47;;;1498:66;;1486:2;1471:18;1540:46:20;1352:218:36;2081:198:11;;;;;;:::i;:::-;;:::i;2266:101:27:-;;;;;;:::i;:::-;;:::i;7152:473:20:-;7414:22;7431:4;7414:16;:22::i;:::-;7502:17;;:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:17;;;;;:29;;:116;;7545:5;;7502:116;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7152:473;;;;;:::o;1831:101:11:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;2876:134:27:-;1094:13:11;:11;:13::i;:::-;2970:33:27::1;2992:10;2970:21;:33::i;:::-;2876:134:::0;:::o;8007:172:20:-;8058:7;8081:11;;8096:1;8081:16;8077:67;;8120:13;;;;;;;;;;;;;;8077:67;-1:-1:-1;8161:11:20;;;8007:172::o;2081:198:11:-;1094:13;:11;:13::i;:::-;2169:22:::1;::::0;::::1;2161:73;;;::::0;::::1;::::0;;2781:2:36;2161:73:11::1;::::0;::::1;2763:21:36::0;2820:2;2800:18;;;2793:30;2859:34;2839:18;;;2832:62;2930:8;2910:18;;;2903:36;2956:19;;2161:73:11::1;;;;;;;;;2244:28;2263:8;2244:18;:28::i;2266:101:27:-:0;1094:13:11;:11;:13::i;:::-;2339:21:27::1;2352:7;2339:12;:21::i;386:207:35:-:0;444:19;492:2;521;540:21;;;;-1:-1:-1;540:21:35;;;:46;;;578:8;565:21;;:9;:21;;;;540:46;533:53;386:207;-1:-1:-1;;;;386:207:35:o;5704:608:20:-;5824:11;;5816:4;:19;5812:56;;5704:608;:::o;5812:56::-;5943:21;5967:17;;;:11;:17;;;;;;;;;6067:18;;;6063:73;;6108:17;;;;;;;;;;;;;;6063:73;6240:19;;6206:31;;;;:15;:31;:::i;:::-;:53;6202:104;;;6282:13;;;;;;;;;;;;;;6202:104;5758:554;5704:608;:::o;1359:130:11:-;1273:6;;1422:23;1273:6;719:10:13;1422:23:11;1414:68;;;;;;;3472:2:36;1414:68:11;;;3454:21:36;;;3491:18;;;3484:30;3550:34;3530:18;;;3523:62;3602:18;;1414:68:11;3270:356:36;2433:187:11;2525:6;;;;2541:17;;;;;;;;;;;2573:40;;2525:6;;;2541:17;2525:6;;2573:40;;2506:16;;2573:40;2496:124;2433:187;:::o;9002:165:20:-;9080:19;:32;;;9128;;1131:25:36;;;9128:32:20;;1119:2:36;1104:18;9128:32:20;;;;;;;9002:165;:::o;4858:403::-;4916:25;4944:20;;;:11;:20;;;;;;;;4979:35;;4975:94;;5037:21;;;;;;;;;;;;;;4975:94;5138:11;:21;;;5079;5169:20;;;:11;:20;;;;;;;;;:36;;;;5111:15;5169:36;;;;;;;;;5221:33;;3805:25:36;;;3846:18;;;3839:75;5111:15:20;5221:33;;3778:18:36;5221:33:20;;;;;;;4906:355;;4858:403;:::o;14:546:36:-;134:6;142;150;158;166;197:3;241:2;229:9;220:7;216:23;212:32;209:52;;;257:1;254;247:12;209:52;293:9;280:23;270:33;;350:2;339:9;335:18;322:32;312:42;;401:2;390:9;386:18;373:32;363:42;;452:2;441:9;437:18;424:32;414:42;;491:7;486:2;475:9;471:18;468:31;465:51;;;512:1;509;502:12;465:51;;550:3;539:9;535:19;525:29;;14:546;;;;;;;;:::o;1167:180::-;1226:6;1279:2;1267:9;1258:7;1254:23;1250:32;1247:52;;;1295:1;1292;1285:12;1247:52;-1:-1:-1;1318:23:36;;1167:180;-1:-1:-1;1167:180:36:o;1575:309::-;1634:6;1687:2;1675:9;1666:7;1662:23;1658:32;1655:52;;;1703:1;1700;1693:12;1655:52;1742:9;1729:23;1792:42;1785:5;1781:54;1774:5;1771:65;1761:93;;1850:1;1847;1840:12;1761:93;1873:5;1575:309;-1:-1:-1;;;1575:309:36:o;1889:685::-;2145:3;2130:19;;2168:6;;2207;2134:9;2183:35;2275:1;2237:18;;;2264:13;;;2340:6;;2374:194;2388:4;2385:1;2382:11;2374:194;;;2447:13;;2435:26;;2484:4;2543:15;;;;2508:12;;;;2408:1;2401:9;2374:194;;;2378:3;;;1889:685;;;;;:::o;2986:279::-;3026:4;3054:1;3051;3048:8;3045:188;;;3089:77;3086:1;3079:88;3190:4;3187:1;3180:15;3218:4;3215:1;3208:15;3045:188;-1:-1:-1;3250:9:36;;2986:279::o",
    "linkReferences": {},
    "immutableReferences": {
      "29454": [
        {
          "start": 276,
          "length": 32
        }
      ]
    }
  },
  "methodIdentifiers": {
    "getTreeDepth()": "8e5cdd50",
    "latestRoot()": "d7b0fef1",
    "owner()": "8da5cb5b",
    "receiveRoot(uint256)": "fbde929b",
    "renounceOwnership()": "715018a6",
    "rootHistory(uint256)": "f1c621ee",
    "rootHistoryExpiry()": "b0d69079",
    "setRootHistoryExpiry(uint256)": "c70aa727",
    "transferOwnership(address)": "f2fde38b",
    "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": "354ca120"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_treeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotOverwriteRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpiredRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRootsSeen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"depth\",\"type\":\"uint8\"}],\"name\":\"UnsupportedTreeDepth\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"timestamp\",\"type\":\"uint128\"}],\"name\":\"RootAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpiry\",\"type\":\"uint256\"}],\"name\":\"RootHistoryExpirySet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getTreeDepth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRoot\",\"type\":\"uint256\"}],\"name\":\"receiveRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rootHistory\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootHistoryExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiryTime\",\"type\":\"uint256\"}],\"name\":\"setRootHistoryExpiry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"signalHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"externalNullifierHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Worldcoin\",\"custom:deployment\":\"deployed through make local-mock\",\"errors\":{\"UnsupportedTreeDepth(uint8)\":[{\"params\":{\"depth\":\"The tree depth that was passed.\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_treeDepth\":\"The depth of the WorldID Semaphore merkle tree.\"}},\"latestRoot()\":{\"custom:reverts\":\"NoRootsSeen If there is no latest root.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveRoot(uint256)\":{\"custom:reverts\":\"CannotOverwriteRoot If the root already exists in the root history.string If the caller is not the owner.\",\"details\":\"This function can revert if Optimism's CrossDomainMessenger stops processing proofs         or if OPLabs stops submitting them. Next iteration of Optimism's cross-domain messaging, will be         fully permissionless for message-passing, so this will not be an issue.         Sequencer needs to include changes to the CrossDomainMessenger contract on L1,         not economically penalized if messages are not included, however the fraud prover (Cannon)         can force the sequencer to include it.\",\"params\":{\"newRoot\":\"The value of the new root.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRootHistoryExpiry(uint256)\":{\"custom:reverts\":\"string If the caller is not the owner.\",\"params\":{\"expiryTime\":\"The new amount of time it takes for a root to expire.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"custom:reverts\":\"string If the zero-knowledge proof cannot be verified for the public inputs.\",\"details\":\"Note that a double-signaling check is not included here, and should be carried by the      caller.\",\"params\":{\"externalNullifierHash\":\"A keccak256 hash of the external nullifier\",\"nullifierHash\":\"The nullifier hash\",\"proof\":\"The zero-knowledge proof\",\"root\":\"The root of the Merkle tree\",\"signalHash\":\"A keccak256 hash of the Semaphore signal\"}}},\"title\":\"OPWorldID and PolygonWorldID Mock\",\"version\":1},\"userdoc\":{\"errors\":{\"CannotOverwriteRoot()\":[{\"notice\":\"Emitted when attempting to update the timestamp for a root that already has one.\"}],\"ExpiredRoot()\":[{\"notice\":\"Emitted when attempting to validate a root that has expired.\"}],\"NoRootsSeen()\":[{\"notice\":\"Emitted if the latest root is requested but the bridge has not seen any roots yet.\"}],\"NonExistentRoot()\":[{\"notice\":\"Emitted when attempting to validate a root that has yet to be added to the root         history.\"}],\"UnsupportedTreeDepth(uint8)\":[{\"notice\":\"Emitted when the provided semaphore tree depth is unsupported.\"}]},\"events\":{\"RootAdded(uint256,uint128)\":{\"notice\":\"Emitted when a new root is received by the contract.\"},\"RootHistoryExpirySet(uint256)\":{\"notice\":\"Emitted when the expiry time for the root history is updated.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the contract the depth of the associated merkle tree.\"},\"getTreeDepth()\":{\"notice\":\"Gets the Semaphore tree depth the contract was initialized with.\"},\"latestRoot()\":{\"notice\":\"Gets the value of the latest root.\"},\"receiveRoot(uint256)\":{\"notice\":\"This function is called by the state bridge contract when it forwards a new root to         the bridged WorldID.\"},\"rootHistory(uint256)\":{\"notice\":\"The mapping between the value of the merkle tree root and the timestamp at which it         entered the root history.\"},\"rootHistoryExpiry()\":{\"notice\":\"Gets the amount of time it takes for a root in the root history to expire.\"},\"setRootHistoryExpiry(uint256)\":{\"notice\":\"Sets the amount of time it takes for a root in the root history to expire.\"},\"verifyProof(uint256,uint256,uint256,uint256,uint256[8])\":{\"notice\":\"A verifier for the semaphore protocol.\"}},\"notice\":\"Mock of PolygonWorldID and OpWorldID in order to test functionality on a local chain\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mock/MockBridgedWorldID.sol\":\"MockBridgedWorldID\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/\",\":@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":@rari-capital/solmate/=lib/solmate/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":fx-portal/contracts/=lib/contracts/contracts/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solmate/=lib/solmate/\",\":src/=src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"src/SemaphoreVerifier.sol\":{\"keccak256\":\"0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f\",\"dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF\"]},\"src/abstract/WorldIDBridge.sol\":{\"keccak256\":\"0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d\",\"dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC\"]},\"src/interfaces/ISemaphoreVerifier.sol\":{\"keccak256\":\"0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585\",\"dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs\"]},\"src/interfaces/IWorldID.sol\":{\"keccak256\":\"0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6\",\"dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv\"]},\"src/mock/MockBridgedWorldID.sol\":{\"keccak256\":\"0xeffcecbcd885c3a12313f802360baae0a52249bf1f692c0e4e71d2672d3cbd8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7449b6f9d938a45860648e4b8212098f839cacbf507c48e42488df0029a55896\",\"dweb:/ipfs/Qmazo4y41oHMJST1FJV1K7VdfUZw4xCzdvfd79UYNGaHNv\"]},\"src/utils/SemaphoreTreeDepthValidator.sol\":{\"keccak256\":\"0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231\",\"dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.15+commit.e14f2714"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "_treeDepth",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "CannotOverwriteRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "ExpiredRoot"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NoRootsSeen"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "NonExistentRoot"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "depth",
              "type": "uint8"
            }
          ],
          "type": "error",
          "name": "UnsupportedTreeDepth"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint128",
              "name": "timestamp",
              "type": "uint128",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RootAdded",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newExpiry",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "RootHistoryExpirySet",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getTreeDepth",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "latestRoot",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "newRoot",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "receiveRoot"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "rootHistory",
          "outputs": [
            {
              "internalType": "uint128",
              "name": "",
              "type": "uint128"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "rootHistoryExpiry",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "expiryTime",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRootHistoryExpiry"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "root",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "signalHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nullifierHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "externalNullifierHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256[8]",
              "name": "proof",
              "type": "uint256[8]"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "verifyProof"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "constructor": {
            "params": {
              "_treeDepth": "The depth of the WorldID Semaphore merkle tree."
            }
          },
          "latestRoot()": {
            "custom:reverts": "NoRootsSeen If there is no latest root."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "receiveRoot(uint256)": {
            "custom:reverts": "CannotOverwriteRoot If the root already exists in the root history.string If the caller is not the owner.",
            "details": "This function can revert if Optimism's CrossDomainMessenger stops processing proofs         or if OPLabs stops submitting them. Next iteration of Optimism's cross-domain messaging, will be         fully permissionless for message-passing, so this will not be an issue.         Sequencer needs to include changes to the CrossDomainMessenger contract on L1,         not economically penalized if messages are not included, however the fraud prover (Cannon)         can force the sequencer to include it.",
            "params": {
              "newRoot": "The value of the new root."
            }
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setRootHistoryExpiry(uint256)": {
            "custom:reverts": "string If the caller is not the owner.",
            "params": {
              "expiryTime": "The new amount of time it takes for a root to expire."
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": {
            "custom:reverts": "string If the zero-knowledge proof cannot be verified for the public inputs.",
            "details": "Note that a double-signaling check is not included here, and should be carried by the      caller.",
            "params": {
              "externalNullifierHash": "A keccak256 hash of the external nullifier",
              "nullifierHash": "The nullifier hash",
              "proof": "The zero-knowledge proof",
              "root": "The root of the Merkle tree",
              "signalHash": "A keccak256 hash of the Semaphore signal"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "constructor": {
            "notice": "Initializes the contract the depth of the associated merkle tree."
          },
          "getTreeDepth()": {
            "notice": "Gets the Semaphore tree depth the contract was initialized with."
          },
          "latestRoot()": {
            "notice": "Gets the value of the latest root."
          },
          "receiveRoot(uint256)": {
            "notice": "This function is called by the state bridge contract when it forwards a new root to         the bridged WorldID."
          },
          "rootHistory(uint256)": {
            "notice": "The mapping between the value of the merkle tree root and the timestamp at which it         entered the root history."
          },
          "rootHistoryExpiry()": {
            "notice": "Gets the amount of time it takes for a root in the root history to expire."
          },
          "setRootHistoryExpiry(uint256)": {
            "notice": "Sets the amount of time it takes for a root in the root history to expire."
          },
          "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": {
            "notice": "A verifier for the semaphore protocol."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eth-optimism/contracts-bedrock/=node_modules/@eth-optimism/contracts-bedrock/",
        "@eth-optimism/contracts/=node_modules/@eth-optimism/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "@rari-capital/solmate/=lib/solmate/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "forge-std/=lib/forge-std/src/",
        "fx-portal/contracts/=lib/contracts/contracts/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solmate/=lib/solmate/",
        "src/=src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/mock/MockBridgedWorldID.sol": "MockBridgedWorldID"
      },
      "libraries": {}
    },
    "sources": {
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "src/SemaphoreVerifier.sol": {
        "keccak256": "0xfe9d9568afcaf3beacde57ea8b400f77f783505eaa77986dd9ea74c18fc8cc58",
        "urls": [
          "bzz-raw://c86f9fd5e48269d983832e5725ecc57b7c73614c0fc372e53e4889fcf822345f",
          "dweb:/ipfs/QmegmxyJsrNP4iq5JkCg2YNvCpBPUHFPNWVsjg3oU9AvMF"
        ],
        "license": "MIT"
      },
      "src/abstract/WorldIDBridge.sol": {
        "keccak256": "0xda64973fd8db8a48d1a3a956f749c1147382f20e49031b81693fab759de0559c",
        "urls": [
          "bzz-raw://3e9a4610c779d89855a987466f77df1f0911a3e9493be1e09540fbd863bcd66d",
          "dweb:/ipfs/QmbVsDpZ8n8uUaBkrzJk8hrbm7sedeTCQKRjV9wM5b2ePC"
        ],
        "license": "MIT"
      },
      "src/interfaces/ISemaphoreVerifier.sol": {
        "keccak256": "0x148cc393769ae9101bb83e6a3ad96b9ad4d3cfe3e603251b6b45e393154c4f49",
        "urls": [
          "bzz-raw://d6caa4906d0823bf15a438a57acc2b63ef8ba86c411f979d712e75e6d883d585",
          "dweb:/ipfs/QmS6cmSQXYBC8zEyMan8pJDejahAM13sqNz8NfRb1QCmKs"
        ],
        "license": "MIT"
      },
      "src/interfaces/IWorldID.sol": {
        "keccak256": "0x8e480116b6e51b7c9920e2e452f40a940f693b3318f6d6625c590ac87c2d9e02",
        "urls": [
          "bzz-raw://eb203172fcf0b5b2a35fe2dd8cf62af220f0aabcb05ed306c7eaa3836edd6ee6",
          "dweb:/ipfs/QmZ6Z5wJHzWdCtLoNxNWFzKsb5WnT53mjamfziN1VhJbYv"
        ],
        "license": "MIT"
      },
      "src/mock/MockBridgedWorldID.sol": {
        "keccak256": "0xeffcecbcd885c3a12313f802360baae0a52249bf1f692c0e4e71d2672d3cbd8d",
        "urls": [
          "bzz-raw://7449b6f9d938a45860648e4b8212098f839cacbf507c48e42488df0029a55896",
          "dweb:/ipfs/Qmazo4y41oHMJST1FJV1K7VdfUZw4xCzdvfd79UYNGaHNv"
        ],
        "license": "MIT"
      },
      "src/utils/SemaphoreTreeDepthValidator.sol": {
        "keccak256": "0x383ed25705dadfb674c7bd2f8c4999c6368da1bc63b9f212a9526ed3672e7acb",
        "urls": [
          "bzz-raw://93f49cc11cc7a3b6d70aca44a223bfccfe5ccbc513e294076efb0d4b55b0e231",
          "dweb:/ipfs/QmSYASLuaNjFk6zyp436j5Meoa9M6ECnLure286bHKg1Ma"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/mock/MockBridgedWorldID.sol",
    "id": 29832,
    "exportedSymbols": {
      "MockBridgedWorldID": [
        29831
      ],
      "Ownable": [
        22914
      ],
      "SemaphoreTreeDepthValidator": [
        31343
      ],
      "SemaphoreVerifier": [
        29440
      ],
      "WorldIDBridge": [
        29700
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:2981:27",
    "nodes": [
      {
        "id": 29780,
        "nodeType": "PragmaDirective",
        "src": "32:24:27",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".15"
        ]
      },
      {
        "id": 29782,
        "nodeType": "ImportDirective",
        "src": "58:61:27",
        "nodes": [],
        "absolutePath": "src/abstract/WorldIDBridge.sol",
        "file": "src/abstract/WorldIDBridge.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29832,
        "sourceUnit": 29701,
        "symbolAliases": [
          {
            "foreign": {
              "id": 29781,
              "name": "WorldIDBridge",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 29700,
              "src": "66:13:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 29784,
        "nodeType": "ImportDirective",
        "src": "120:86:27",
        "nodes": [],
        "absolutePath": "src/utils/SemaphoreTreeDepthValidator.sol",
        "file": "src/utils/SemaphoreTreeDepthValidator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29832,
        "sourceUnit": 31344,
        "symbolAliases": [
          {
            "foreign": {
              "id": 29783,
              "name": "SemaphoreTreeDepthValidator",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31343,
              "src": "128:27:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 29786,
        "nodeType": "ImportDirective",
        "src": "207:60:27",
        "nodes": [],
        "absolutePath": "src/SemaphoreVerifier.sol",
        "file": "src/SemaphoreVerifier.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29832,
        "sourceUnit": 29441,
        "symbolAliases": [
          {
            "foreign": {
              "id": 29785,
              "name": "SemaphoreVerifier",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 29440,
              "src": "215:17:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 29788,
        "nodeType": "ImportDirective",
        "src": "268:66:27",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        "file": "openzeppelin-contracts/access/Ownable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 29832,
        "sourceUnit": 22915,
        "symbolAliases": [
          {
            "foreign": {
              "id": 29787,
              "name": "Ownable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 22914,
              "src": "276:7:27",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 29831,
        "nodeType": "ContractDefinition",
        "src": "556:2456:27",
        "nodes": [
          {
            "id": 29803,
            "nodeType": "FunctionDefinition",
            "src": "1033:58:27",
            "nodes": [],
            "body": {
              "id": 29802,
              "nodeType": "Block",
              "src": "1089:2:27",
              "nodes": [],
              "statements": []
            },
            "documentation": {
              "id": 29794,
              "nodeType": "StructuredDocumentation",
              "src": "869:159:27",
              "text": "@notice Initializes the contract the depth of the associated merkle tree.\n @param _treeDepth The depth of the WorldID Semaphore merkle tree."
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 29799,
                    "name": "_treeDepth",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 29796,
                    "src": "1077:10:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  }
                ],
                "id": 29800,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 29798,
                  "name": "WorldIDBridge",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 29700,
                  "src": "1063:13:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "1063:25:27"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 29797,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29796,
                  "mutability": "mutable",
                  "name": "_treeDepth",
                  "nameLocation": "1051:10:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 29803,
                  "src": "1045:16:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 29795,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1045:5:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1044:18:27"
            },
            "returnParameters": {
              "id": 29801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1089:0:27"
            },
            "scope": 29831,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 29816,
            "nodeType": "FunctionDefinition",
            "src": "2266:101:27",
            "nodes": [],
            "body": {
              "id": 29815,
              "nodeType": "Block",
              "src": "2329:38:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29812,
                        "name": "newRoot",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29806,
                        "src": "2352:7:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29811,
                      "name": "_receiveRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29573,
                      "src": "2339:12:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 29813,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2339:21:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29814,
                  "nodeType": "ExpressionStatement",
                  "src": "2339:21:27"
                }
              ]
            },
            "documentation": {
              "id": 29804,
              "nodeType": "StructuredDocumentation",
              "src": "1350:911:27",
              "text": "@notice This function is called by the state bridge contract when it forwards a new root to\n         the bridged WorldID.\n @dev    This function can revert if Optimism's CrossDomainMessenger stops processing proofs\n         or if OPLabs stops submitting them. Next iteration of Optimism's cross-domain messaging, will be\n         fully permissionless for message-passing, so this will not be an issue.\n         Sequencer needs to include changes to the CrossDomainMessenger contract on L1,\n         not economically penalized if messages are not included, however the fraud prover (Cannon)\n         can force the sequencer to include it.\n @param newRoot The value of the new root.\n @custom:reverts CannotOverwriteRoot If the root already exists in the root history.\n @custom:reverts string If the caller is not the owner."
            },
            "functionSelector": "fbde929b",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 29809,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 29808,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 22833,
                  "src": "2319:9:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "2319:9:27"
              }
            ],
            "name": "receiveRoot",
            "nameLocation": "2275:11:27",
            "parameters": {
              "id": 29807,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29806,
                  "mutability": "mutable",
                  "name": "newRoot",
                  "nameLocation": "2295:7:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 29816,
                  "src": "2287:15:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29805,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2287:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2286:17:27"
            },
            "returnParameters": {
              "id": 29810,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2329:0:27"
            },
            "scope": 29831,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "id": 29830,
            "nodeType": "FunctionDefinition",
            "src": "2876:134:27",
            "nodes": [],
            "body": {
              "id": 29829,
              "nodeType": "Block",
              "src": "2960:50:27",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 29826,
                        "name": "expiryTime",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 29819,
                        "src": "2992:10:27",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 29825,
                      "name": "_setRootHistoryExpiry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 29690,
                      "src": "2970:21:27",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 29827,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2970:33:27",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 29828,
                  "nodeType": "ExpressionStatement",
                  "src": "2970:33:27"
                }
              ]
            },
            "baseFunctions": [
              29675
            ],
            "documentation": {
              "id": 29817,
              "nodeType": "StructuredDocumentation",
              "src": "2626:245:27",
              "text": "@notice Sets the amount of time it takes for a root in the root history to expire.\n @param expiryTime The new amount of time it takes for a root to expire.\n @custom:reverts string If the caller is not the owner."
            },
            "functionSelector": "c70aa727",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 29823,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 29822,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 22833,
                  "src": "2950:9:27"
                },
                "nodeType": "ModifierInvocation",
                "src": "2950:9:27"
              }
            ],
            "name": "setRootHistoryExpiry",
            "nameLocation": "2885:20:27",
            "overrides": {
              "id": 29821,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "2941:8:27"
            },
            "parameters": {
              "id": 29820,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 29819,
                  "mutability": "mutable",
                  "name": "expiryTime",
                  "nameLocation": "2914:10:27",
                  "nodeType": "VariableDeclaration",
                  "scope": 29830,
                  "src": "2906:18:27",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 29818,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2906:7:27",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2905:20:27"
            },
            "returnParameters": {
              "id": 29824,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2960:0:27"
            },
            "scope": 29831,
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 29790,
              "name": "WorldIDBridge",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 29700,
              "src": "587:13:27"
            },
            "id": 29791,
            "nodeType": "InheritanceSpecifier",
            "src": "587:13:27"
          },
          {
            "baseName": {
              "id": 29792,
              "name": "Ownable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 22914,
              "src": "602:7:27"
            },
            "id": 29793,
            "nodeType": "InheritanceSpecifier",
            "src": "602:7:27"
          }
        ],
        "canonicalName": "MockBridgedWorldID",
        "contractDependencies": [
          29440
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 29789,
          "nodeType": "StructuredDocumentation",
          "src": "336:220:27",
          "text": "@title OPWorldID and PolygonWorldID Mock\n @author Worldcoin\n @notice Mock of PolygonWorldID and OpWorldID in order to test functionality on a local chain\n @custom:deployment deployed through make local-mock"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          29831,
          22914,
          23019,
          29700,
          29768
        ],
        "name": "MockBridgedWorldID",
        "nameLocation": "565:18:27",
        "scope": 29832,
        "usedErrors": [
          29483,
          29486,
          29489,
          29492,
          29495
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 27
}